{"version":3,"sources":["../../../../../src/webgpu/api/validation/copy_between_linear_data_and_texture/copyBetweenLinearDataAndTexture_dataRelated.spec.ts"],"names":["description","params","poptions","makeTestGroup","kTextureFormats","kTextureFormatInfo","align","CopyBetweenLinearDataAndTextureTest","kAllTestMethods","texelBlockAlignmentTestExpanderForOffset","texelBlockAlignmentTestExpanderForRowsPerImage","formatCopyableWithMethod","g","test","combine","fn","t","rowsPerImageInBlocks","copyHeightInBlocks","copyDepth","method","format","rowsPerImage","blockHeight","copyHeight","texture","device","createTexture","size","width","height","depth","usage","GPUTextureUsage","COPY_SRC","COPY_DST","success","testRun","bytesPerRow","dataSize","_success","bytesPerRowPadding","rowsPerImagePaddingInBlocks","copyWidthInBlocks","offsetInBlocks","filter","bytesPerRowAlignment","copyWidth","blockWidth","offset","bytesPerBlock","bytesInACompleteRow","minDataSize","requiredBytesInCopy","createAlignedTexture","expand","blocksPerRow","additionalPaddingPerRow","dataSizeInBlocks"],"mappings":"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","sourcesContent":["export const description = '';\n\nimport { params, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureFormats, kTextureFormatInfo } from '../../../capability_info.js';\nimport { align } from '../../../util/math.js';\n\nimport {\n  CopyBetweenLinearDataAndTextureTest,\n  kAllTestMethods,\n  texelBlockAlignmentTestExpanderForOffset,\n  texelBlockAlignmentTestExpanderForRowsPerImage,\n  formatCopyableWithMethod,\n} from './copyBetweenLinearDataAndTexture.js';\n\nexport const g = makeTestGroup(CopyBetweenLinearDataAndTextureTest);\n\ng.test('bound_on_rows_per_image')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('rowsPerImageInBlocks', [0, 1, 2]))\n      .combine(poptions('copyHeightInBlocks', [0, 1, 2]))\n      .combine(poptions('copyDepth', [1, 3]))\n  )\n  .fn(async t => {\n    const { rowsPerImageInBlocks, copyHeightInBlocks, copyDepth, method } = t.params;\n\n    const format = 'rgba8unorm';\n    const rowsPerImage = rowsPerImageInBlocks * kTextureFormatInfo[format].blockHeight!;\n    const copyHeight = copyHeightInBlocks * kTextureFormatInfo[format].blockHeight!;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 3 },\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    // The WebGPU spec:\n    // If layout.rowsPerImage is not 0, it must be greater than or equal to copyExtent.height.\n    // If copyExtent.depth is greater than 1: layout.rowsPerImage must be greater than or equal to copyExtent.height.\n    // TODO: Update this if https://github.com/gpuweb/gpuweb/issues/984 changes the spec.\n\n    let success = true;\n    if (rowsPerImage !== 0 && rowsPerImage < copyHeight) {\n      success = false;\n    }\n    if (copyDepth > 1 && rowsPerImage < copyHeight) {\n      success = false;\n    }\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 1024, rowsPerImage },\n      { width: 0, height: copyHeight, depth: copyDepth },\n      { dataSize: 1, method, success }\n    );\n  });\n\n// Test with offset + requiredBytesIsCopy overflowing GPUSize64.\ng.test('offset_plus_required_bytes_in_copy_overflow')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine([\n        { bytesPerRow: 2 ** 31, rowsPerImage: 2 ** 31, depth: 1, _success: true }, // success case\n        { bytesPerRow: 2 ** 31, rowsPerImage: 2 ** 31, depth: 16, _success: false }, // bytesPerRow * rowsPerImage * (depth - 1) overflows.\n      ])\n  )\n  .fn(async t => {\n    const { method, bytesPerRow, rowsPerImage, depth, _success } = t.params;\n\n    const texture = t.device.createTexture({\n      size: [1, 1, depth],\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    t.testRun(\n      { texture },\n      { bytesPerRow, rowsPerImage },\n      { width: 1, height: 1, depth },\n      {\n        dataSize: 10000,\n        method,\n        success: _success,\n      }\n    );\n  });\n\n// Testing that the minimal data size condition is checked correctly.\n// In the success case, we test the exact value.\n// In the failing case, we test the exact value minus 1.\ng.test('required_bytes_in_copy')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine([\n        { bytesPerRowPadding: 0, rowsPerImagePaddingInBlocks: 0 }, // no padding\n        { bytesPerRowPadding: 0, rowsPerImagePaddingInBlocks: 6 }, // rowsPerImage padding\n        { bytesPerRowPadding: 6, rowsPerImagePaddingInBlocks: 0 }, // bytesPerRow padding\n        { bytesPerRowPadding: 15, rowsPerImagePaddingInBlocks: 17 }, // both paddings\n      ])\n      .combine([\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 4, copyDepth: 5, offsetInBlocks: 0 }, // standard copy\n        { copyWidthInBlocks: 5, copyHeightInBlocks: 4, copyDepth: 3, offsetInBlocks: 11 }, // standard copy, offset > 0\n        { copyWidthInBlocks: 256, copyHeightInBlocks: 3, copyDepth: 2, offsetInBlocks: 0 }, // copyWidth is 256-aligned\n        { copyWidthInBlocks: 0, copyHeightInBlocks: 4, copyDepth: 5, offsetInBlocks: 0 }, // empty copy because of width\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 0, copyDepth: 5, offsetInBlocks: 0 }, // empty copy because of height\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 4, copyDepth: 0, offsetInBlocks: 13 }, // empty copy because of depth, offset > 0\n        { copyWidthInBlocks: 1, copyHeightInBlocks: 4, copyDepth: 5, offsetInBlocks: 0 }, // copyWidth = 1\n        { copyWidthInBlocks: 3, copyHeightInBlocks: 1, copyDepth: 5, offsetInBlocks: 15 }, // copyHeight = 1, offset > 0\n        { copyWidthInBlocks: 5, copyHeightInBlocks: 4, copyDepth: 1, offsetInBlocks: 0 }, // copyDepth = 1\n        { copyWidthInBlocks: 7, copyHeightInBlocks: 1, copyDepth: 1, offsetInBlocks: 0 }, // copyHeight = 1 and copyDepth = 1\n      ])\n      .combine(poptions('format', kTextureFormats))\n      .filter(formatCopyableWithMethod)\n  )\n  .fn(async t => {\n    const {\n      offsetInBlocks,\n      bytesPerRowPadding,\n      rowsPerImagePaddingInBlocks,\n      copyWidthInBlocks,\n      copyHeightInBlocks,\n      copyDepth,\n      format,\n      method,\n    } = t.params;\n\n    // In the CopyB2T and CopyT2B cases we need to have bytesPerRow 256-aligned,\n    // to make this happen we align the bytesInACompleteRow value and multiply\n    // bytesPerRowPadding by 256.\n    const bytesPerRowAlignment = method === 'WriteTexture' ? 1 : 256;\n\n    const copyWidth = copyWidthInBlocks * kTextureFormatInfo[format].blockWidth!;\n    const copyHeight = copyHeightInBlocks * kTextureFormatInfo[format].blockHeight!;\n    const offset = offsetInBlocks * kTextureFormatInfo[format].bytesPerBlock!;\n    const rowsPerImage =\n      copyHeight + rowsPerImagePaddingInBlocks * kTextureFormatInfo[format].blockHeight!;\n    const bytesPerRow =\n      align(t.bytesInACompleteRow(copyWidth, format), bytesPerRowAlignment) +\n      bytesPerRowPadding * bytesPerRowAlignment;\n    const size = { width: copyWidth, height: copyHeight, depth: copyDepth };\n\n    const minDataSize =\n      offset + t.requiredBytesInCopy({ offset, bytesPerRow, rowsPerImage }, format, size);\n\n    const texture = t.createAlignedTexture(format, size);\n\n    t.testRun({ texture }, { offset, bytesPerRow, rowsPerImage }, size, {\n      dataSize: minDataSize,\n      method,\n      success: true,\n    });\n\n    if (minDataSize > 0) {\n      t.testRun({ texture }, { offset, bytesPerRow, rowsPerImage }, size, {\n        dataSize: minDataSize - 1,\n        method,\n        success: false,\n      });\n    }\n  });\n\ng.test('texel_block_alignment_on_rows_per_image')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('format', kTextureFormats))\n      .filter(formatCopyableWithMethod)\n      .expand(texelBlockAlignmentTestExpanderForRowsPerImage)\n  )\n  .fn(async t => {\n    const { rowsPerImage, format, method } = t.params;\n    const size = { width: 0, height: 0, depth: 0 };\n\n    const texture = t.createAlignedTexture(format, size);\n\n    const success = rowsPerImage % kTextureFormatInfo[format].blockHeight! === 0;\n\n    t.testRun({ texture }, { bytesPerRow: 0, rowsPerImage }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\n// TODO: Update this if https://github.com/gpuweb/gpuweb/issues/985 changes the spec.\ng.test('texel_block_alignment_on_offset')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('format', kTextureFormats))\n      .filter(formatCopyableWithMethod)\n      .expand(texelBlockAlignmentTestExpanderForOffset)\n  )\n  .fn(async t => {\n    const { format, offset, method } = t.params;\n    const size = { width: 0, height: 0, depth: 0 };\n\n    const texture = t.createAlignedTexture(format, size);\n\n    const success = offset % kTextureFormatInfo[format].bytesPerBlock! === 0;\n\n    t.testRun({ texture }, { offset, bytesPerRow: 0 }, size, { dataSize: offset, method, success });\n  });\n\ng.test('bound_on_bytes_per_row')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine([\n        { blocksPerRow: 2, additionalPaddingPerRow: 0, copyWidthInBlocks: 2 }, // success\n        { blocksPerRow: 2, additionalPaddingPerRow: 5, copyWidthInBlocks: 3 }, // success if bytesPerBlock <= 5\n        { blocksPerRow: 1, additionalPaddingPerRow: 0, copyWidthInBlocks: 2 }, // failure, bytesPerRow > 0\n        { blocksPerRow: 0, additionalPaddingPerRow: 0, copyWidthInBlocks: 1 }, // failure, bytesPerRow = 0\n      ])\n      .combine([\n        { copyHeightInBlocks: 0, copyDepth: 1 }, // we don't have to check the bound\n        { copyHeightInBlocks: 1, copyDepth: 0 }, // we don't have to check the bound\n        { copyHeightInBlocks: 2, copyDepth: 1 }, // we have to check the bound\n        { copyHeightInBlocks: 0, copyDepth: 2 }, // we have to check the bound\n      ])\n      .combine(poptions('format', kTextureFormats))\n      .filter(formatCopyableWithMethod)\n  )\n  .fn(async t => {\n    const {\n      blocksPerRow,\n      additionalPaddingPerRow,\n      copyWidthInBlocks,\n      copyHeightInBlocks,\n      copyDepth,\n      format,\n      method,\n    } = t.params;\n\n    // In the CopyB2T and CopyT2B cases we need to have bytesPerRow 256-aligned,\n    // to make this happen we multiply copyWidth and bytesPerRow by 256, so that\n    // the appropriate inequalities still hold.\n    const bytesPerRowAlignment = method === 'WriteTexture' ? 1 : 256;\n\n    const copyWidth =\n      copyWidthInBlocks * kTextureFormatInfo[format].blockWidth! * bytesPerRowAlignment;\n    const copyHeight = copyHeightInBlocks * kTextureFormatInfo[format].blockHeight!;\n    const bytesPerRow =\n      (blocksPerRow * kTextureFormatInfo[format].bytesPerBlock! + additionalPaddingPerRow) *\n      bytesPerRowAlignment;\n    const size = { width: copyWidth, height: copyHeight, depth: copyDepth };\n\n    const texture = t.createAlignedTexture(format, size);\n\n    let success = true;\n    if (copyHeight > 1 || copyDepth > 1) {\n      success = bytesPerRow >= t.bytesInACompleteRow(copyWidth, format);\n    }\n\n    t.testRun({ texture }, { bytesPerRow, rowsPerImage: copyHeight }, size, {\n      dataSize: 1024,\n      method,\n      success,\n    });\n  });\n\ng.test('bound_on_offset')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('offsetInBlocks', [0, 1, 2]))\n      .combine(poptions('dataSizeInBlocks', [0, 1, 2]))\n  )\n  .fn(async t => {\n    const { offsetInBlocks, dataSizeInBlocks, method } = t.params;\n\n    const format = 'rgba8unorm';\n    const offset = offsetInBlocks * kTextureFormatInfo[format].bytesPerBlock!;\n    const dataSize = dataSizeInBlocks * kTextureFormatInfo[format].bytesPerBlock!;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = offset <= dataSize;\n\n    t.testRun(\n      { texture },\n      { offset, bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize, method, success }\n    );\n  });\n"],"file":"copyBetweenLinearDataAndTexture_dataRelated.spec.js"}