{"version":3,"sources":["../../../../../src/webgpu/api/validation/resource_usages/textureUsageInRender.spec.ts"],"names":["description","poptions","params","makeTestGroup","kTextureFormatInfo","kShaderStages","ValidationTest","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","SAMPLED","device","size","depth","dimension","g","READ_BASE_LEVEL","READ_BASE_LAYER","test","writeBaseLevel","writeBaseLayer","_success","fn","t","texture","sampleView","createView","baseMipLevel","baseArrayLayer","renderView","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","type","bindGroup","createBindGroup","resource","layout","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","attachment","loadValue","r","b","a","storeOp","setBindGroup","endPass","expectValidationError","finish","combine","unless","readAspect","writeAspect","stencil","view","success","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","readVisibility","writeVisibility","writeHasVertexStage","Boolean","VERTEX","texUsage","STORAGE","bglEntries","bgEntries","push","storageTextureFormat"],"mappings":"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","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass.\n\nTest Coverage:\n - Tests that read and write usages upon the same texture subresource, or different subresources\n   of the same texture. Different subresources of the same texture includes different mip levels,\n   different array layers, and different aspects.\n   - When read and write usages are binding to the same texture subresource, an error should be\n     generated. Otherwise, no error should be generated.\n`;\n\nimport { poptions, params } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureFormatInfo, kShaderStages } from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n      usage = GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depth: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage,\n    });\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst READ_BASE_LEVEL = 3;\nconst READ_BASE_LAYER = 0;\n\ng.test('readwrite_upon_subresources')\n  .params([\n    // read and write usages are binding to the same texture subresource.\n    {\n      writeBaseLevel: READ_BASE_LEVEL,\n      writeBaseLayer: READ_BASE_LAYER,\n      _success: false,\n    },\n\n    // read and write usages are binding to different mip levels of the same texture.\n    {\n      writeBaseLevel: READ_BASE_LEVEL + 1,\n      writeBaseLayer: READ_BASE_LAYER,\n      _success: true,\n    },\n\n    // read and write usages are binding to different array layers of the same texture.\n    {\n      writeBaseLevel: READ_BASE_LEVEL,\n      writeBaseLayer: READ_BASE_LAYER + 1,\n      _success: true,\n    },\n  ])\n  .fn(async t => {\n    const { writeBaseLevel, writeBaseLayer, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: 2, mipLevelCount: 6 });\n\n    const sampleView = texture.createView({\n      baseMipLevel: READ_BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: READ_BASE_LAYER,\n      arrayLayerCount: 1,\n    });\n    const renderView = texture.createView({\n      baseMipLevel: writeBaseLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: writeBaseLayer,\n      arrayLayerCount: 1,\n    });\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, type: 'sampled-texture' }],\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      entries: [{ binding: 0, resource: sampleView }],\n      layout: bindGroupLayout,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: renderView,\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !_success);\n  });\n\ng.test('readwrite_upon_aspects')\n  .params(\n    params()\n      .combine(poptions('format', ['depth32float', 'depth24plus', 'depth24plus-stencil8'] as const))\n      .combine(poptions('readAspect', ['all', 'depth-only', 'stencil-only'] as const))\n      .combine(poptions('writeAspect', ['all', 'depth-only', 'stencil-only'] as const))\n      .unless(\n        ({ format, readAspect, writeAspect }) =>\n          // TODO: Exclude depth-only aspect once WebGPU supports stencil-only texture format(s).\n          (readAspect === 'stencil-only' && !kTextureFormatInfo[format].stencil) ||\n          (writeAspect === 'stencil-only' && !kTextureFormatInfo[format].stencil)\n      )\n  )\n  .fn(async t => {\n    const { format, readAspect, writeAspect } = t.params;\n\n    const view = t.createTexture({ format }).createView();\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, type: 'sampled-texture' }],\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      entries: [{ binding: 0, resource: view }],\n      layout: bindGroupLayout,\n    });\n\n    const success =\n      (readAspect === 'depth-only' && writeAspect === 'stencil-only') ||\n      (readAspect === 'stencil-only' && writeAspect === 'depth-only');\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: t.createTexture().createView(),\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment: {\n        attachment: view,\n        depthStoreOp: 'clear',\n        depthLoadValue: 'load',\n        stencilStoreOp: 'clear',\n        stencilLoadValue: 'load',\n      },\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('shader_stages_and_visibility')\n  .params(\n    params()\n      .combine(poptions('readVisibility', [0, ...kShaderStages]))\n      .combine(poptions('writeVisibility', [0, ...kShaderStages]))\n  )\n  .fn(async t => {\n    const { readVisibility, writeVisibility } = t.params;\n\n    // writeonly-storage-texture binding type is not supported in vertex stage. So, this test\n    // uses writeonly-storage-texture binding as writable binding upon the same subresource if\n    // vertex stage is not included. Otherwise, it uses output attachment instead.\n    const writeHasVertexStage = Boolean(writeVisibility & GPUShaderStage.VERTEX);\n    const texUsage = writeHasVertexStage\n      ? GPUTextureUsage.SAMPLED | GPUTextureUsage.OUTPUT_ATTACHMENT\n      : GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE;\n\n    const texture = t.createTexture({ usage: texUsage });\n    const view = texture.createView();\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: readVisibility, type: 'sampled-texture' },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view }];\n    if (!writeHasVertexStage) {\n      bglEntries.push({\n        binding: 1,\n        visibility: writeVisibility,\n        type: 'writeonly-storage-texture',\n        storageTextureFormat: 'rgba8unorm',\n      });\n      bgEntries.push({ binding: 1, resource: view });\n    }\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: writeHasVertexStage ? view : t.createTexture().createView(),\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.endPass();\n\n    // Texture usages in bindings with invisible shader stages should be tracked. Invisible shader\n    // stages include shader stage with visibility none and compute shader stage in render pass.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n"],"file":"textureUsageInRender.spec.js"}